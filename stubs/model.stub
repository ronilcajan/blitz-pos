<?php

namespace {{ namespace }};

use App\Models\Scopes\{{ class }}Scope;
use Illuminate\Database\Eloquent\Attributes\ScopedBy;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

#[ScopedBy([{{ class }}Scope::class])]
class {{ class }} extends Model
{
    use HasFactory, SoftDeletes, LogsActivity;

    public function store():BelongsTo
    {
        return $this->belongsTo(Store::class);
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->useLogName('{{ class }}')
            ->logOnly(['name'])
            ->logOnlyDirty()
            ->setDescriptionForEvent(fn(string $eventName) => "This data has been {$eventName}");
    }

    protected static function booted(): void
    {
        static::creating(function($model){
            $model->store_id = auth()->user()->store->id;
        });

        static::updating(function($model){
            $model->store_id = auth()->user()->store->id;
        });

    }
}
